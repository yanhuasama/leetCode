//超时
class Solution {
    public int[] dailyTemperatures(int[] T) {
        List<Integer> list=new ArrayList<>();
            int arr[]=new int[T.length];
            for (int i : T) {
                list.add(i);
            }
            int temp=0;
            while (list.size()>0){
                Integer before = list.get(0);
                list.remove(0);
                if (list.size()==0){
                    arr[temp]=0;
                    break;
                }
                int count=1;
                for (Integer after : list) {

                    if (before>=after){
                        count++;
                    }

                    if (before<after){
                        break;
                    }

                    if ((count-1)==list.size()){
                        count=0;
                    }
                }
                arr[temp++]=count;
            }

            return arr;
    }
}

//换栈
 class Solution {
    public int[] dailyTemperatures(int[] T) {
        Stack<Integer> stack = new Stack<>();
        int[] res = new int[T.length];
        for(int i = 0; i < T.length; ++i){
            while(!stack.isEmpty() && T[i] > T[stack.peek()]){
                int temp = stack.pop();
                res[temp] = i - temp;
            }
            stack.push(i);
        }
        return res;
    }
}
